@page "/RegisterOwnCompany"
@using Dotnetstore.Shared.Business
@inject NavigationManager NavigationManager
@inject IStringLocalizer<RegisterOwnCompanyResource> Local
@inject IUnitOfWork UnitOfWork

<PageTitle>Dotnetstore - @Local["RegisterOwnCompany"]</PageTitle>

<MudGrid Style="Margin: 20px;">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string"
                              Label="@Local["Name"]"
                              Required="true"
                              RequiredError="@Local["NameIsRequired"]"
                              @bind-Value="@ownCompanyAddRequestDto.Name"
                              InputType="InputType.Text"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Info"
                              AdornmentColor="Color.Inherit" />
                <MudTextField T="string"
                              Label="@Local["Description"]"
                              HelperText="@Local["Description"]"
                              Required="true"
                              RequiredError="@Local["DescriptionIsRequired"]"
                              InputType="InputType.Text"
                              @bind-Value="@ownCompanyAddRequestDto.Description"
                              Lines="5"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Description"
                              AdornmentColor="Color.Inherit" />
                <MudTextField T="string"
                              Label="@Local["CorporateID"]"
                              HelperText="@Local["CorporateID"]"
                              InputType="InputType.Text"
                              @bind-Value="@ownCompanyAddRequestDto.CorporateID"
                              Required="false"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Description"
                              AdornmentColor="Color.Inherit" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!success)"
                               Class="ml-auto"
                               OnClick="SaveOwnCompanyAsync">@Global["Save"]</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       DisableElevation="true"
                       OnClick="@(()=>form.Validate())">@Global["Validate"]</MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       DisableElevation="true"
                       OnClick="@(()=>form.Reset())"
                       Class="mx-2">@Global["Reset"]</MudButton>
            <MudButton Variant="Variant.Filled"
                       DisableElevation="true"
                       OnClick="@(()=>form.ResetValidation())">@Global["ResetValidation"]</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"{@Global["Errors"]} ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudForm form;

    private OwnCompanyAddRequestDto ownCompanyAddRequestDto = new();

    private async Task SaveOwnCompanyAsync()
    {
        errors = new[] { "", "", "" };

        try
        {
            var result = await UnitOfWork.Business.OwnCompany.AddAsync(ownCompanyAddRequestDto);

            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var responseMessage = result?.HttpResponseMessage?.ToString() ?? "";
                var errorMessage = "Something went wrong";
                var stackTrace = "";

                if (result?.Response is not null)
                {
                    errorMessage = result?.Response?.ErrorMessage ?? "Something went wrong";
                    stackTrace = result?.Response?.StackTrace ?? "";
                }

                errors[0] = responseMessage;
                errors[1] = errorMessage;
                errors[2] = stackTrace;
            }
        }
        catch (Exception exception)
        {
            errors[0] = exception.Message;
        }
    }
}