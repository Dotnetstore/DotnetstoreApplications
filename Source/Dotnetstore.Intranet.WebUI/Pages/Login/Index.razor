@page "/"
@inject NavigationManager NavigationManager
@inject IStringLocalizer<LoginResource> Local
@inject IStringLocalizer<Resource> Global
@inject IUnitOfWork UnitOfWork
@using System.Text.RegularExpressions
@using Dotnetstore.Shared.Business
@using Dotnetstore.UnitOfWorks.Intranet.Frontend

<PageTitle>Dotnetstore - @Local["Login"]</PageTitle>

<MudGrid Style="Margin: 20px;">
    <MudItem xs="12" sm="7">
        @if (_ownCompanyDtos.Count < 1)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <MudPaper Class="pa-4">
                <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudSelect @bind-Value="stringValue"
                           Required="true"
                           RequiredError="@Local["CompanyIsRequired"]"
                           Label="@Local["SelectCompany"]"
                           HelperText="@Local["SelectThePlaceYouWorkIn"]"
                           Placeholder="@Local["PleaseSelect"]"
                           AdornmentIcon="@Icons.Material.Filled.Store"
                           AdornmentColor="Color.Inherit">
                        @foreach (var company in _ownCompanyDtos)
                        {
                            <MudSelectItem Value="@company.ID">@company.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField T="string"
                              Label="@Local["Username"]"
                              Required="true"
                              RequiredError="@Local["UsernameIsRequired"]"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Key"
                              AdornmentColor="Color.Inherit" />
                    <MudTextField T="string"
                              Label="@Local["Password"]"
                              HelperText="@Local["Password"]"
                              @ref="pwField1"
                              InputType="InputType.Password"
                              Required="true"
                              RequiredError="@Local["PasswordIsRequired"]"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Key"
                              AdornmentColor="Color.Inherit" />
                    <div class="d-flex align-center justify-space-between">
                        <MudCheckBox T="bool"
                                 Required="true"
                                 RequiredError="@Local["YouMustAgree"]"
                                 Label="@Local["IAgree"]" />
                        <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!success)"
                               Class="ml-auto">@Local["Login"]</MudButton>
                    </div>
                </MudForm>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       DisableElevation="true"
                       OnClick="@(()=>form.Validate())">@Local["Validate"]</MudButton>
                <MudButton Variant="Variant.Filled"
                       Color="Color.Secondary"
                       DisableElevation="true"
                       OnClick="@(()=>form.Reset())"
                       Class="mx-2">@Local["Reset"]</MudButton>
                <MudButton Variant="Variant.Filled"
                       DisableElevation="true"
                       OnClick="@(()=>form.ResetValidation())">@Local["ResetValidation"]</MudButton>
            </MudPaper>
        }
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    private string stringValue { get; set; }

    private List<OwnCompanyDto> _ownCompanyDtos = new List<OwnCompanyDto>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        await LoadOwnCompaniesAsync();
        await base.OnInitializedAsync();
    }

    private async Task LoadOwnCompaniesAsync()
    {
        var result = await UnitOfWork.Business.OwnCompany.GetAllAvailableAsync();

        if (result.Response.Count < 1)
        {
            NavigationManager.NavigateTo("/RegisterOwnCompany");
        }

        _ownCompanyDtos = result.Response;
    }

    private static IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

}